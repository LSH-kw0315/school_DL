{"cells":[{"cell_type":"markdown","metadata":{"id":"ArOjRcYF1iJV"},"source":["# Simple MNIST convnet\n","by uramoon@kw.ac.kr\n","\n","원본 출처<br>\n","**Author:** [fchollet](https://twitter.com/fchollet) (<a href=\"https://raw.githubusercontent.com/ronreiter/interactive-tutorials/master/LICENSE\">Apache 2.0 License</a>)<br>\n","**Date created:** 2015/06/19<br>\n","**Last modified:** 2020/04/21<br>\n","**Description:** A simple convnet that achieves ~99% test accuracy on MNIST.\n","\n","단순한 CNN을 사용해도 99% 이상의 테스트 정확도를 달성할 수 있습니다. CNN이 우리가 직접 그린 그림도 잘 예측할까요?"]},{"cell_type":"markdown","source":["상단 메뉴 런타임 - 런타임 유형 변경에서 **GPU**를 선택하고 진행하세요."],"metadata":{"id":"vwLA7xE9Pq8N"}},{"cell_type":"markdown","metadata":{"id":"45H8fP9Y1iJY"},"source":["## Setup"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"jdgsqtqJ1iJY","executionInfo":{"status":"ok","timestamp":1712903050212,"user_tz":-540,"elapsed":4928,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"outputs":[],"source":["import numpy as np\n","from tensorflow import keras\n","from tensorflow.keras import layers"]},{"cell_type":"markdown","metadata":{"id":"Wa5mXEAT1iJZ"},"source":["## TODO 1: Feature scaling"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"EukNZ4871iJZ","executionInfo":{"status":"ok","timestamp":1712903093222,"user_tz":-540,"elapsed":363,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"outputs":[],"source":["# Model / data parameters\n","num_classes = 10            # 레이블의 개수 (0, 1, 2, ..., 9, 10개)\n","input_shape = (28, 28, 1)   # CNN은 2차원 정보를 활용합니다. (28 x 28 흑백 이미지 한 장, 기존 MLP는 784개 픽셀의 명암을 사용)\n","\n","# the data, split between train and test sets\n","# X를 이미지, y를 이미지에 대한 레이블로 표현합니다.\n","# X_train[0]은 첫 번째 훈련 그림, y_train[0]은 첫 번째 훈련 그림의 정답 ([0, 9]에 속한 숫자 하나)\n","(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n","\n","# 각 픽셀 값을 [0, 255] -> [0, 1]로 변환하세요.\n","X_train = X_train.astype(\"float32\") / 255.0\n","X_test = X_test.astype(\"float32\") / 255.0"]},{"cell_type":"markdown","source":["## TODO 2: Input shape"],"metadata":{"id":"YWnoMeIYTcnD"}},{"cell_type":"code","source":["# 훈련용 이미지의 shape을 출력하세요. (6만장의 28 x 28 이미지)\n","X_train.shape"],"metadata":{"id":"5RTLJgz5RBJ0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903107814,"user_tz":-540,"elapsed":499,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"08641417-7953-4784-807e-f7235329fd40"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28)"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["## TODO 3: Shape expanding"],"metadata":{"id":"wJ3L-zu1TjFW"}},{"cell_type":"code","source":["# Make sure images have shape (28, 28, 1)\n","# CNN은 한 장의 이미지 모양을 (가로, 세로, 채널 수)로 만들어야 합니다.\n","# 컬러 이미지는 R, G, B 세 장의 채널이지만 MNIST는 흑백이라 한 장의 채널이 필요합니다.\n","# 최종적으로 6만장의 28 x 28 이미지 흑백 채널 하나가 필요합니다.\n","# 가장 마지막 자리에 차원 하나 늘리기: (60000, 28, 28) -> (60000, 28, 28, 1),\n","# 차원 늘리기 대신 reshape 함수도 사용 가능\n","\n","# expand_dims는 NumPy 배열의 특정 위치에 차원을 늘려줍니다.\n","# 파이썬에서 인덱싱할 때 가장 마지막 위치를 나타내는 (음의) 정수를 기입하세요.\n","X_train = np.expand_dims(X_train, -1 )\n","X_test = np.expand_dims(X_test, -1)\n","print(\"X_train shape:\", X_train.shape)\n","print(X_train.shape[0], \"train samples\")\n","print(X_test.shape[0], \"test samples\")"],"metadata":{"id":"QdQuL31jQuPG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903239117,"user_tz":-540,"elapsed":516,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"419db5c2-7bbd-4004-fa2a-92db163faeba"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape: (60000, 28, 28, 1)\n","60000 train samples\n","10000 test samples\n"]}]},{"cell_type":"markdown","metadata":{"id":"5crne86l1iJa"},"source":["## Build the model"]},{"cell_type":"code","source":["model = keras.Sequential(\n","    [\n","        keras.Input(shape=input_shape),\n","        layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"), # 3 by 3 크기로 이차원 이미지를 Scan 하는 유닛이 32개 있음\n","        layers.MaxPooling2D(pool_size=(2, 2)),                    # 2 by 2 크기의 이미지를 하나의 값으로 요약\n","        layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"), # 3 by 3 크기로 이차원 이미지를 Scan 하는 유닛이 64개 있음\n","        layers.MaxPooling2D(pool_size=(2, 2)),                    # 2 by 2 크기의 이미지를 하나의 값으로 요약\n","        layers.Flatten(),                                 # MLP에 사용되는 입력처럼 1차원 배열로 만들어주는 층\n","        layers.Dense(num_classes, activation=\"softmax\"),  # CNN의 출력층은 MLP와 동일합니다.\n","    ]\n",")\n","\n","model.summary()"],"metadata":{"id":"cHowQ6H2KQ7T","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903299439,"user_tz":-540,"elapsed":1291,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"8fabbfbd-e317-4bd2-b89a-30484862f07a"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 13, 13, 32)        0         \n"," D)                                                              \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 5, 5, 64)          0         \n"," g2D)                                                            \n","                                                                 \n"," flatten (Flatten)           (None, 1600)              0         \n","                                                                 \n"," dense (Dense)               (None, 10)                16010     \n","                                                                 \n","=================================================================\n","Total params: 34826 (136.04 KB)\n","Trainable params: 34826 (136.04 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["##TODO 4: Model training"],"metadata":{"id":"wVtff9FzUzLW"}},{"cell_type":"code","execution_count":9,"metadata":{"id":"U8l6slYJ1iJc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903385090,"user_tz":-540,"elapsed":32445,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"da4809b2-1dcf-45c2-d813-4baf05e0cee7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10000\n","375/375 [==============================] - 5s 5ms/step - loss: 0.2931 - accuracy: 0.9135 - val_loss: 0.1072 - val_accuracy: 0.9693\n","Epoch 2/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0889 - accuracy: 0.9731 - val_loss: 0.0695 - val_accuracy: 0.9781\n","Epoch 3/10000\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0637 - accuracy: 0.9804 - val_loss: 0.0547 - val_accuracy: 0.9844\n","Epoch 4/10000\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0501 - accuracy: 0.9843 - val_loss: 0.0565 - val_accuracy: 0.9836\n","Epoch 5/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0429 - accuracy: 0.9874 - val_loss: 0.0471 - val_accuracy: 0.9858\n","Epoch 6/10000\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0364 - accuracy: 0.9888 - val_loss: 0.0494 - val_accuracy: 0.9842\n","Epoch 7/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0317 - accuracy: 0.9906 - val_loss: 0.0519 - val_accuracy: 0.9847\n","Epoch 8/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0282 - accuracy: 0.9916 - val_loss: 0.0415 - val_accuracy: 0.9875\n","Epoch 9/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0247 - accuracy: 0.9928 - val_loss: 0.0441 - val_accuracy: 0.9868\n","Epoch 10/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0218 - accuracy: 0.9935 - val_loss: 0.0474 - val_accuracy: 0.9876\n","Epoch 11/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0193 - accuracy: 0.9944 - val_loss: 0.0405 - val_accuracy: 0.9888\n","Epoch 12/10000\n","375/375 [==============================] - 2s 5ms/step - loss: 0.0173 - accuracy: 0.9950 - val_loss: 0.0493 - val_accuracy: 0.9871\n","Epoch 13/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0148 - accuracy: 0.9955 - val_loss: 0.0402 - val_accuracy: 0.9892\n","Epoch 14/10000\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0137 - accuracy: 0.9958 - val_loss: 0.0473 - val_accuracy: 0.9879\n","Epoch 15/10000\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0117 - accuracy: 0.9966 - val_loss: 0.0453 - val_accuracy: 0.9878\n","Epoch 16/10000\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0099 - accuracy: 0.9968 - val_loss: 0.0463 - val_accuracy: 0.9883\n","Epoch 17/10000\n","375/375 [==============================] - 1s 4ms/step - loss: 0.0094 - accuracy: 0.9970 - val_loss: 0.0511 - val_accuracy: 0.9881\n","Epoch 18/10000\n","375/375 [==============================] - 2s 4ms/step - loss: 0.0076 - accuracy: 0.9976 - val_loss: 0.0452 - val_accuracy: 0.9888\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7df9ea81a0e0>"]},"metadata":{},"execution_count":9}],"source":["from tensorflow.keras.callbacks import EarlyStopping\n","\n","batch_size = 128\n","epochs = 10000\n","\n","model.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"rmsprop\", metrics=[\"accuracy\"])\n","\n","# TODO: 자유롭게 설정하세요.\n","# https://keras.io/api/callbacks/early_stopping/\n","es = EarlyStopping(patience=5, restore_best_weights=True)\n","\n","# 훈련 데이터의 20%는 사용하지 않고 남겨두었다가 Epoch이 끝날 때마다 남겨둔 데이터로 성능을 평가하여 출력해보세요.\n","# 따로 테스트를 하지 않더라도 테스트 했을 때의 성능을 짐작할 수 있게 도와줍니다.\n","# Hint: https://keras.io/api/models/model_training_apis/ 에서 fit method 참조\n","model.fit(X_train, y_train, batch_size=batch_size, epochs=epochs, callbacks=es, validation_split=0.2)"]},{"cell_type":"markdown","metadata":{"id":"mBq6ZYNk1iJc"},"source":["## Evaluate the trained model\n","\n","Test 정확도가 99% 미만이면 TODO4부터 다시 수행하세요."]},{"cell_type":"code","execution_count":10,"metadata":{"id":"3MiZmVp71iJc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903396469,"user_tz":-540,"elapsed":11382,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"1158b5ae-727c-4c2c-a7f4-c734df0862c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.031504884362220764\n","Test accuracy: 0.9900000095367432\n"]}],"source":["score = model.evaluate(X_test, y_test, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])"]},{"cell_type":"markdown","source":["## 우리가 만든 테스트 데이터 읽어오기\n","좌측 파일 메뉴를 활용하여 our_test_images_2024.npy, our_test_labels_2024.npy 파일을 Colab에 업로드하세요. 과거 광운대학교와 42 Seoul 수강생들이 만든 자료입니다. 나중에 여러분들이 그린 그림도 추가됩니다.\n"],"metadata":{"id":"AxovfB3oWDbc"}},{"cell_type":"code","source":["our_test_images = np.load('our_test_images_2024.npy')\n","our_test_labels = np.load('our_test_labels_2024.npy')"],"metadata":{"id":"3YK47PmO6wLr","executionInfo":{"status":"ok","timestamp":1712903446358,"user_tz":-540,"elapsed":501,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["잘 읽어왔는지 9장을 무작위로 그려봅니다."],"metadata":{"id":"e7DlsOFXPOFF"}},{"cell_type":"code","source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import random\n","\n","plt.figure(figsize=(10, 10))\n","for i in range(9):\n","  ax = plt.subplot(3, 3, i + 1)\n","  rand = random.randint(0, len(our_test_images) - 1)\n","  plt.imshow(our_test_images[rand].reshape(28, 28))\n","  plt.title(our_test_labels[rand])\n","  plt.axis(\"off\")"],"metadata":{"id":"4ZChHb00PNh-","colab":{"base_uri":"https://localhost:8080/","height":829},"executionInfo":{"status":"ok","timestamp":1712903448459,"user_tz":-540,"elapsed":1580,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"755c2eca-83ff-4b07-dd0d-606cb8721360"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 9 Axes>"],"image/png":"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Wq16L//RvZXPGV3rDJGynJj6XMkAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVEoGAACQSskAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVEoGAACQSskAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVEoGAACQSskAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVI1Wq9Vq9xAAAMDw4UoGAACQSskAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVEoGAACQSskAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVEoGAACQSskAAABSKRkAAEAqJQMAAEilZAAAAKmUDAAAIJWSAQAApFIyAACAVErGMNfb2xtnnHFGTJs2LcaOHRtz586NG2+8sd1jAR3m7rvvjsMPPzwmTZoU48aNi9mzZ8eFF17Y7rGALdyHP/zhaDQav/W/lStXtntEBkmj1Wq12j0Eg2fBggWxePHiOO2002LmzJnxla98Je666664+eab4+CDD273eEAHuOGGG+Ld73537LfffvHBD34wJkyYEA8++GA0m8347Gc/2+7xgC3Y0qVL48EHH3zFY61WK0488cSYPn163HfffW2ajMGmZAxjd955Z8ydOzc+97nPxemnnx4RET09PTF79uyYMmVKLFmypM0TAlu6tWvXxqxZs2LevHmxePHi6OpyARyo57bbbotDDjkkzj333PjkJz/Z7nEYJL5bDGOLFy+O7u7uOOGEE156bMyYMXHcccfF0qVL49FHH23jdEAnWLRoUTzxxBNx7rnnRldXV6xfvz6azWa7xwI62KJFi6LRaMTRRx/d7lEYRErGMHbPPffErFmzYuLEia94/IADDoiIiGXLlrVhKqCT3HTTTTFx4sRYuXJl7LXXXjFhwoSYOHFinHTSSdHT09Pu8YAOs2nTprjmmmti3rx5MX369HaPwyBSMoaxxx9/PKZOnfqqx198bNWqVUM9EtBhHnjggejr64v3vOc9MX/+/PjGN74Rxx57bFx00UXxkY98pN3jAR3m+uuvj9WrV8cxxxzT7lEYZCPaPQCD54UXXojRo0e/6vExY8a8lAOUrFu3LjZs2BAn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jIsvvjjOOeecmDlzZpunBLZ006dPj7e+9a3xx3/8xzF58uT4/ve/HwsXLowdd9wxTj755HaPB2zhVq9eHZ/61Kfi7LPPju23377d4zBElIxhbOzYsRERsWDBglc8fvTRR8fFF18cS5cuVTKAoq9//etxwgknxPLly2PnnXeOiP/6y4pmsxlnnHFGLFiwICZPntzmKYEt2VlnnRWTJk2KU045pd2jMIT8m4xhbNq0aRHx6n+wOWXKlIiIWLNmzZDPBHSWL3zhC7Hffvu9VDBedPjhh8eGDRvinnvuadNkQCd44IEH4pJLLolTTz01Vq1aFStWrIgVK1ZET09PbNq0KVasWBHPPPNMu8dkECgZw9j+++8fERErV658xeOrVq2KiHDJEqj0xBNPRH9//6se37RpU0RE9PX1DfVIQAdZuXJlNJvNOPXUU2PGjBkv/XfHHXfE8uXLY8aMGXHOOee0e0wGgR+XGsaOPPLI+Ju/+Zu47LLL4m1ve9tLj1966aUxYsSIl+4aA/DbzJo1K2644YZYvnx5zJo166XHv/a1r0VXV1fsu+++bZwO2NLNnj07vvWtb73q8bPOOiuef/75uOCCC2KPPfZow2QMtkar1Wq1ewgGz3HHHRdf/vKX48gjj4xDDz00brnllrj22mvjzDPPjIULF7Z7PGALd+utt8bb3va2mDx5cpx88skxefLk+N73vhc//OEP4/jjj48vfelL7R4R6ECHHXZYPP3003Hvvfe2exQGiZIxzG3atCkWLlwYl19+eaxatSp22223+NjHPhannXZau0cDOsSdd94Zf/3Xfx333HNPrF69OmbMmBF/8id/En/xF38RI0a4IA5sPiVj+FMyAACAVP7hNwAAkErJAAAAUikZAABAKiUDAABIpWQAAACplAwAACCVkgEAAKQa8BalP+w6YjDnAAboxua17R7hNfM+AluGTn0f8R4CW4aBvIe4kgEAAKRSMgAAgFRKBgAAkErJAAAAUikZAABAKiUDAABIpWQAAACplAwAACCVkgEAAKRSMgAAgFRKBgAAkErJAAAAUikZAABAKiUDAABIpWQAAACplAwAACCVkgEAAKRSMgAAgFRKBgAAkErJAAAAUikZAABAKiUDAABIpWQAAACplAwAACCVkgEAAKRSMgAAgFRKBgAAkErJAAAAUikZAABAKiUDAABINaLd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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## TODO5: 테스트 이미지 모양 변환"],"metadata":{"id":"8HxdM3IxSVBo"}},{"cell_type":"code","source":["# TODO: 현재 our_test_images_2024의 모양을 출력해봅시다.\n","our_test_images.shape"],"metadata":{"id":"O4C5esE2SY88","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903496515,"user_tz":-540,"elapsed":408,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"4e6b6371-08cd-4af9-e5b1-d0dda9790229"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(200, 784)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# TODO: 우리가 만든 모델의 입력층에 들어갈 수 있도록 our_test_images 모양을 바꿔봅시다.\n","# Hint: reshape 함수를 사용하면 쉽습니다.\n","our_test_images =our_test_images.reshape(our_test_images.shape[0],28,28,1)"],"metadata":{"id":"gZ7U-Kd9Sc8C","executionInfo":{"status":"ok","timestamp":1712903551285,"user_tz":-540,"elapsed":3,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["## TODO 6: 우리가 만든 테스트 데이터로 모델 평가\n","evaluate 함수를 사용합니다. 예측이 잘 되나요?<br>\n","다음 시간에 이 문제를 해결할 것입니다."],"metadata":{"id":"iNbHa0qIci6n"}},{"cell_type":"code","source":["score = model.evaluate(our_test_images, our_test_labels, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])"],"metadata":{"id":"6rNvMkdS69Ov","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1712903590141,"user_tz":-540,"elapsed":455,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"64f99f85-0bc6-468c-a225-3d0b7964bd2a"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.9940834641456604\n","Test accuracy: 0.7400000095367432\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1FrXZUBV44_-wQU47A0VwZ5dAr8GJ8OtB","timestamp":1712902374358},{"file_id":"1e78AwWsbAacX4OQbrxxlNppLId4PASOU","timestamp":1652592373926},{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/mnist_convnet.ipynb","timestamp":1647761524901}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}