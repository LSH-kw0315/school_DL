{"cells":[{"cell_type":"markdown","metadata":{"id":"PNR351ge7Qb9"},"source":["# Transfer learning & fine-tuning\n","by uramoon@kw.ac.kr<br><br>\n","\n","Xception을 사용하여 고양이와 개를 분류해봅시다.<br>\n","런타임 유형은 GPU로 설정하세요.<br>\n","\n","처음에는 Xception을 바닥부터 훈련시키고,\n","나중에는 ImageNet에 대해 훈련된 <br>Xception을 불러와 전이학습을 진행해 두 방법의 결과를 비교해 볼 것입니다.\n","\n","**Author:** [fchollet](https://twitter.com/fchollet)<br>\n","**Date created:** 2020/04/15<br>\n","**Last modified:** 2020/05/12<br>\n","**Description:** Complete guide to transfer learning & fine-tuning in Keras.<br>\n","(<a href=\"https://raw.githubusercontent.com/ronreiter/interactive-tutorials/master/LICENSE\">Apache 2.0 License</a>)"]},{"cell_type":"markdown","metadata":{"id":"EseCFXYV7QcA"},"source":["## Setup"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"yfI7THmn7QcA","executionInfo":{"status":"ok","timestamp":1715927226614,"user_tz":-540,"elapsed":12308,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras"]},{"cell_type":"markdown","metadata":{"id":"nm0AGWSs7QcB"},"source":["## 소개\n","\n","**전이 학습**은 어떤 문제에 대해 학습된 특징들을 새로운 문제의 풀이에 사용하는 것을 뜻합니다. <br>예를 들면, 라쿤을 인식하는 모델에서 사용되는 특징들로 너구리를 인식하는 데 사용할 수 있을 것입니다.<br>\n","\n","<img src=\"https://extension.umd.edu/sites/extension.umd.edu/files/styles/optimized/public/2021-02/hgic_veg_wildlife_raccoon.jpg?itok=p4k_Z_CF\" height=\"200\"><figcaption>라쿤 사진 출처: https://extension.umd.edu/resource/raccoons</figcaption>\n","\n","<img src=\"https://image-notepet.akamaized.net/resize/620x-/seimage/20171108%2Fe6d1ec360a4ab04e21e580882d9c989e.jpg\" height=\"200\"><figcaption>너구리 사진 출처: https://www.notepet.co.kr/news/article/article_view/?idx=10434</figcaption>\n","\n","전이학습은 다음의 수행절차를 갖습니다.\n","1. 기존에 훈련된 모델을 가져온다.\n","2. 가져온 모델을 훈련이 불가능하도록 설정한다. (가중치들을 고정시킴)\n","3. 가져온 모델에 몇 개의 층을 추가한다.\n","4. 내가 추가한 층만 나의 데이터로 훈련시킨다.\n","\n","추가적으로 고정시킨 모델도 훈련 가능하도록 설정해 세부 튜닝을 시도할 수 있습니다.\n","\n","This is adapted from\n","[Deep Learning with Python](https://www.manning.com/books/deep-learning-with-python)\n"," and the 2016 blog post\n","[\"building powerful image classification models using very little\n"," data\"](https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html)."]},{"cell_type":"markdown","metadata":{"id":"6MHi_AVw7QcI"},"source":["## 데이터 가져오기\n","원래 25,000장의 그림이 있는데 15,000장만 가져와서 그 중 10,000장은 훈련, 2500장은 검증, 2500장은 테스트에 사용하겠습니다.<br>\n","(오염된 이미지들이 있어서 다 받아오진 못하고 수 백장의 사진이 걸러집니다.)"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"MvBpIk2u7QcI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715927230026,"user_tz":-540,"elapsed":3414,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"514f9bf4-7853-404f-a0d3-06e4551ece91"},"outputs":[{"output_type":"stream","name":"stdout","text":["Number of training samples: 9305\n","Number of validation samples: 2326\n","Number of test samples: 2326\n"]}],"source":["import tensorflow_datasets as tfds\n","\n","tfds.disable_progress_bar()\n","\n","# 임시 코드 (다운로드가 안되면 지우세요.)\n","setattr(tfds.image_classification.cats_vs_dogs, '_URL',\"https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_5340.zip\")\n","\n","train_ds, validation_ds, test_ds = tfds.load(\n","    \"cats_vs_dogs\",\n","    # Reserve 10% for validation and 10% for test\n","    split=[\"train[:40%]\", \"train[40%:50%]\", \"train[50%:60%]\"],\n","    as_supervised=True,  # Include labels\n",")\n","\n","print(\"Number of training samples: %d\" % tf.data.experimental.cardinality(train_ds))\n","print(\n","    \"Number of validation samples: %d\" % tf.data.experimental.cardinality(validation_ds)\n",")\n","print(\"Number of test samples: %d\" % tf.data.experimental.cardinality(test_ds))"]},{"cell_type":"markdown","source":["## TODO1: 데이터셋 전처리하기\n","\n","Xception 모델을 사용할 것이라 지난 주 Xception 노트북에서 사용한 코드를 그대로 사용합니다."],"metadata":{"id":"1X1NIOLN_u6L"}},{"cell_type":"code","source":["# 각 데이터셋의 크기 변경하기\n","size = (150, 150)\n","\n","train_ds = train_ds.map(lambda X, y: (tf.image.resize(X, size), y))#TODO\n","validation_ds = validation_ds.map(lambda X, y: (tf.image.resize(X, size), y))#TODO\n","test_ds = test_ds.map(lambda X, y: (tf.image.resize(X, size), y))#TODO"],"metadata":{"id":"kQSbgHOW_0g-","executionInfo":{"status":"ok","timestamp":1715927230026,"user_tz":-540,"elapsed":11,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Xception의 전처리 기법 적용하기\n","from tensorflow.keras.applications.xception import Xception\n","from tensorflow.keras.applications.xception import preprocess_input\n","\n","train_ds = train_ds.map(lambda X,y : (preprocess_input(X),y))#TODO\n","validation_ds = validation_ds.map(lambda X,y : (preprocess_input(X),y))#TODO\n","test_ds = test_ds.map(lambda X,y : (preprocess_input(X),y))#TODO"],"metadata":{"id":"uTwL6NIE_-3l","executionInfo":{"status":"ok","timestamp":1715927230456,"user_tz":-540,"elapsed":440,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# 데이터셋을 32장씩 묶읍시다.\n","batch_size = 32\n","\n","train_ds =train_ds.cache().batch(batch_size).prefetch(buffer_size=10) #TODO\n","validation_ds = validation_ds.cache().batch(batch_size).prefetch(buffer_size=10)#TODO\n","test_ds = test_ds.cache().batch(batch_size).prefetch(buffer_size=10)#TODO#TODO"],"metadata":{"id":"A5WzWUapAcVd","executionInfo":{"status":"ok","timestamp":1715927230456,"user_tz":-540,"elapsed":4,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hhtbx3Xq7QcK"},"source":["## TODO2: 데이터 증강 층 만들기<br>\n"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"cFmmTjHU7QcK","executionInfo":{"status":"ok","timestamp":1715927230456,"user_tz":-540,"elapsed":4,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"outputs":[],"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","data_augmentation = keras.Sequential(\n","    [\n","        layers.RandomFlip(mode=\"horizontal\"), #각 괄호 안에 적절한 값을 넣으셔야 합니다.\n","        layers.RandomRotation(factor=(-0.1,0.1)), # 중요: 이 층 뒤에 계속 다른 층이 연결될 예정이라 Comma를 지우시면 안됩니다.\n","    ]\n",") #TODO"]},{"cell_type":"markdown","metadata":{"id":"0vZcwfo47QcK"},"source":["## TODO3: 모델 정의하기\n","\n","가져온 모델 앞에 입력층과 데이터 층강층을 추가하고 뒤에 예측하는 부분 (MLP와 같은 Dense층) 을 추가합니다."]},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","base_model = keras.applications.Xception(\n","    weights=None, # 가중치가 랜덤하게 설정되어 훈련이 필요한 Xception 모델을 가져옵니다.\n","    input_shape=(150, 150, 3),\n","    include_top=False,  # 개와 고양이를 예측할 것이기 때문에 ImageNet 데이터를 예측하는 출력층은 포함하지 않습니다.\n",")\n","\n","model = models.Sequential()\n","\n","#TODO: 입력층 추가\n","model.add(layers.Input(shape=(150,150,3)))\n","\n","#TODO: 데이터 증강층 추가\n","model.add(data_augmentation)\n","\n","#가져온 Xception 모델 추가\n","model.add(base_model)\n","\n","# MLP는 일차원으로 펼쳐진 입력이 필요합니다.\n","# 아래 둘 중 원하는 것 하나만 쓰세요.\n","# Xception은 5 x 5 사이즈의 2048개 채널을 출력합니다.\n","#model.add(layers.Flatten()) # 각 채널의 모든 픽셀들을 일차원으로 이어붙이는 무식하고 낡은 방법 (25개 x 2048장)\n","model.add(layers.GlobalAveragePooling2D()) # 각 5 x 5 채널을 하나의 값으로 요약한 후 일차원으로 이어붙이는 방법 (2048개)\n","\n","# 출력층 추가 (0~1 출력하는 노드 하나만 필요하고 적절한 활성화 함수 기재)\n","model.add(layers.Dense(1,activation=\"sigmoid\"))\n","\n","# 컴파일 (이진 분류 문제에 적합한 손실함수 선택)\n","model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"],"metadata":{"id":"AoJ0jaoUCKpI","executionInfo":{"status":"ok","timestamp":1715927235769,"user_tz":-540,"elapsed":5316,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# 훈련 가능한 파라미터의 수를 확인해 보세요.\n","model.summary()"],"metadata":{"id":"KeKHg_iZwZtv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715927235770,"user_tz":-540,"elapsed":14,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"54248729-0641-405e-f813-bbe7b6627941"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," sequential (Sequential)     (None, 150, 150, 3)       0         \n","                                                                 \n"," xception (Functional)       (None, 5, 5, 2048)        20861480  \n","                                                                 \n"," global_average_pooling2d (  (None, 2048)              0         \n"," GlobalAveragePooling2D)                                         \n","                                                                 \n"," dense (Dense)               (None, 1)                 2049      \n","                                                                 \n","=================================================================\n","Total params: 20863529 (79.59 MB)\n","Trainable params: 20809001 (79.38 MB)\n","Non-trainable params: 54528 (213.00 KB)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"l_9fLIML7QcL"},"source":["## 훈련하기\n","굉장히 시간이 오래 걸리므로 epochs을 5로 설정하여 훈련해봅시다."]},{"cell_type":"code","execution_count":9,"metadata":{"id":"OjvNyH3y7QcL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715927642382,"user_tz":-540,"elapsed":406624,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"9490679c-89b5-4d9f-b757-e555964b0258"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","291/291 [==============================] - 114s 275ms/step - loss: 0.6510 - accuracy: 0.6296 - val_loss: 0.6927 - val_accuracy: 0.5052\n","Epoch 2/5\n","291/291 [==============================] - 70s 242ms/step - loss: 0.5494 - accuracy: 0.7258 - val_loss: 0.5267 - val_accuracy: 0.7343\n","Epoch 3/5\n","291/291 [==============================] - 70s 240ms/step - loss: 0.4905 - accuracy: 0.7611 - val_loss: 0.4665 - val_accuracy: 0.7876\n","Epoch 4/5\n","291/291 [==============================] - 70s 240ms/step - loss: 0.4232 - accuracy: 0.8055 - val_loss: 0.3933 - val_accuracy: 0.8177\n","Epoch 5/5\n","291/291 [==============================] - 70s 242ms/step - loss: 0.3685 - accuracy: 0.8320 - val_loss: 0.4733 - val_accuracy: 0.8009\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7d4f58a25a80>"]},"metadata":{},"execution_count":9}],"source":["from keras.callbacks import EarlyStopping\n","\n","epochs = 5\n","model.fit(train_ds, epochs=epochs, validation_data=validation_ds)"]},{"cell_type":"markdown","source":["## 테스트 데이터로 평가해보기\n","\n"],"metadata":{"id":"Arcvlsa_Ge7p"}},{"cell_type":"code","source":["model.evaluate(test_ds)"],"metadata":{"id":"xwHixM5yGhIJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715927647540,"user_tz":-540,"elapsed":5162,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"d86702bf-29ee-404d-aed6-83eb7681283f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["73/73 [==============================] - 5s 62ms/step - loss: 0.4322 - accuracy: 0.8130\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.4322042167186737, 0.8129836916923523]"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["좋은 장비와 충분한 시간이 있다면 성능을 더 끌어올릴 수도 있겠지만 우리에겐 그러한 여력이 없습니다.\n","\n","## TODO 4: 전이학습 시도하기\n","Hint: https://keras.io/api/applications/xception/"],"metadata":{"id":"S7NOBfmMuanB"}},{"cell_type":"code","source":["from keras import models\n","from keras import layers\n","\n","base_model = keras.applications.Xception(\n","    weights='imagenet', # ImageNet에 대해 훈련된 신경망을 가져옵니다. 나머지 채우는 부분은 TODO3과 동일\n","    input_shape=(150, 150, 3),\n","    include_top=False,  # 개와 고양이를 예측할 것이기 때문에 ImageNet 데이터를 예측하는 출력층은 포함하지 않습니다.\n",")\n","# Xception은 훈련이 불가능하도록 설정합니다.\n","base_model.trainable = False # 나중에 세부 튜닝을 위해서 훈련되도록 설정할 수도 있습니다.\n","\n","model = models.Sequential()\n","\n","#TODO: 입력층 추가\n","model.add(layers.Input(shape=(150,150,3)))\n","\n","#TODO: 데이터 증강층 추가\n","model.add(data_augmentation)\n","\n","#가져온 Xception 모델 추가\n","model.add(base_model)\n","\n","# MLP는 일차원으로 펼쳐진 입력이 필요합니다.\n","# 아래 둘 중 원하는 것 하나만 쓰세요.\n","# Xception은 5 x 5 사이즈의 2048개 채널을 출력합니다.\n","#model.add(layers.Flatten()) # 각 채널의 모든 픽셀들을 일차원으로 이어붙이는 무식하고 낡은 방법 (25개 x 2048장)\n","model.add(layers.GlobalAveragePooling2D()) # 각 5 x 5 채널을 하나의 값으로 요약한 후 일차원으로 이어붙이는 방법 (2048개)\n","\n","# 출력층 추가 (0~1 출력하는 노드 하나만 필요하고 적절한 활성화 함수 기재)\n","model.add(layers.Dense(1,activation=\"sigmoid\"))\n","\n","# 컴파일 (이진 분류 문제에 적합한 손실함수 선택)\n","model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"],"metadata":{"id":"9CAVBpwWudWN","executionInfo":{"status":"ok","timestamp":1715927650347,"user_tz":-540,"elapsed":2809,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# 훈련 가능한 파라미터의 수를 확인해 보세요.\n","model.summary()"],"metadata":{"id":"C5_lFCFYwft4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715927650348,"user_tz":-540,"elapsed":19,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"b367c460-e108-45ce-e31b-de7a84bace35"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," sequential (Sequential)     (None, 150, 150, 3)       0         \n","                                                                 \n"," xception (Functional)       (None, 5, 5, 2048)        20861480  \n","                                                                 \n"," global_average_pooling2d_1  (None, 2048)              0         \n","  (GlobalAveragePooling2D)                                       \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 2049      \n","                                                                 \n","=================================================================\n","Total params: 20863529 (79.59 MB)\n","Trainable params: 2049 (8.00 KB)\n","Non-trainable params: 20861480 (79.58 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["## TODO 5: 훈련하기\n","지난 번보다는 빠르지만 어느 정도 시간이 소요되므로 patience를 너무 높게 설정하지는 마세요."],"metadata":{"id":"TFMtQArmvdKb"}},{"cell_type":"code","source":["from keras.callbacks import EarlyStopping\n","\n","# TODO: 자유롭게 설정하세요.\n","epochs = 10000\n","es = [keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=5, restore_best_weights=True)]\n","model.fit(train_ds, epochs=epochs, callbacks=es, validation_data=validation_ds)"],"metadata":{"id":"LjjDEBpFvfLt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715928034141,"user_tz":-540,"elapsed":383806,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"774de273-bcd9-487d-f3ee-74e61658ea3d"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10000\n","291/291 [==============================] - 27s 84ms/step - loss: 0.1647 - accuracy: 0.9318 - val_loss: 0.0846 - val_accuracy: 0.9665\n","Epoch 2/10000\n","291/291 [==============================] - 24s 82ms/step - loss: 0.1112 - accuracy: 0.9548 - val_loss: 0.0780 - val_accuracy: 0.9678\n","Epoch 3/10000\n","291/291 [==============================] - 23s 80ms/step - loss: 0.1018 - accuracy: 0.9586 - val_loss: 0.0754 - val_accuracy: 0.9678\n","Epoch 4/10000\n","291/291 [==============================] - 23s 78ms/step - loss: 0.0989 - accuracy: 0.9608 - val_loss: 0.0748 - val_accuracy: 0.9678\n","Epoch 5/10000\n","291/291 [==============================] - 23s 79ms/step - loss: 0.0932 - accuracy: 0.9635 - val_loss: 0.0748 - val_accuracy: 0.9703\n","Epoch 6/10000\n","291/291 [==============================] - 24s 82ms/step - loss: 0.0926 - accuracy: 0.9601 - val_loss: 0.0737 - val_accuracy: 0.9699\n","Epoch 7/10000\n","291/291 [==============================] - 23s 80ms/step - loss: 0.0886 - accuracy: 0.9639 - val_loss: 0.0738 - val_accuracy: 0.9690\n","Epoch 8/10000\n","291/291 [==============================] - 23s 78ms/step - loss: 0.0911 - accuracy: 0.9611 - val_loss: 0.0747 - val_accuracy: 0.9712\n","Epoch 9/10000\n","291/291 [==============================] - 24s 81ms/step - loss: 0.0858 - accuracy: 0.9657 - val_loss: 0.0733 - val_accuracy: 0.9712\n","Epoch 10/10000\n","291/291 [==============================] - 23s 79ms/step - loss: 0.0850 - accuracy: 0.9656 - val_loss: 0.0740 - val_accuracy: 0.9725\n","Epoch 11/10000\n","291/291 [==============================] - 23s 80ms/step - loss: 0.0818 - accuracy: 0.9667 - val_loss: 0.0744 - val_accuracy: 0.9695\n","Epoch 12/10000\n","291/291 [==============================] - 24s 81ms/step - loss: 0.0825 - accuracy: 0.9692 - val_loss: 0.0759 - val_accuracy: 0.9708\n","Epoch 13/10000\n","291/291 [==============================] - 23s 78ms/step - loss: 0.0791 - accuracy: 0.9685 - val_loss: 0.0770 - val_accuracy: 0.9695\n","Epoch 14/10000\n","291/291 [==============================] - 24s 82ms/step - loss: 0.0782 - accuracy: 0.9685 - val_loss: 0.0777 - val_accuracy: 0.9690\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7d4eb33a8340>"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["<img src='https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FW0TLL%2FbtqRx0uGeC2%2FKxbOgpwhzXXvwu1VtcmjNK%2Fimg.jpg' height=200>"],"metadata":{"id":"e7MyLKdpGhug"}},{"cell_type":"markdown","metadata":{"id":"qA2QpMBl7QcL"},"source":["## 세부 튜닝하기\n","\n","가져온 모델인 Xception까지 우리 데이터에 맞게 훈련해봅시다.<br>\n","너무 많은 시간이 소요될 수 있으니 적당히 수행합니다. (중간에 중단 버튼 눌러도 괜찮음)"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"WSBAgWEj7QcL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715928770075,"user_tz":-540,"elapsed":735940,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"68ef838c-468b-4afa-d9af-88e7c5e345f9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," sequential (Sequential)     (None, 150, 150, 3)       0         \n","                                                                 \n"," xception (Functional)       (None, 5, 5, 2048)        20861480  \n","                                                                 \n"," global_average_pooling2d_1  (None, 2048)              0         \n","  (GlobalAveragePooling2D)                                       \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 2049      \n","                                                                 \n","=================================================================\n","Total params: 20863529 (79.59 MB)\n","Trainable params: 20809001 (79.38 MB)\n","Non-trainable params: 54528 (213.00 KB)\n","_________________________________________________________________\n","Epoch 1/10\n","291/291 [==============================] - 95s 246ms/step - loss: 0.2410 - accuracy: 0.9060 - val_loss: 0.4590 - val_accuracy: 0.8547\n","Epoch 2/10\n","291/291 [==============================] - 70s 240ms/step - loss: 0.1411 - accuracy: 0.9456 - val_loss: 0.2563 - val_accuracy: 0.9063\n","Epoch 3/10\n","291/291 [==============================] - 70s 239ms/step - loss: 0.1156 - accuracy: 0.9541 - val_loss: 0.1102 - val_accuracy: 0.9583\n","Epoch 4/10\n","291/291 [==============================] - 69s 239ms/step - loss: 0.0983 - accuracy: 0.9606 - val_loss: 0.1840 - val_accuracy: 0.9536\n","Epoch 5/10\n","291/291 [==============================] - 70s 239ms/step - loss: 0.0816 - accuracy: 0.9694 - val_loss: 0.0984 - val_accuracy: 0.9639\n","Epoch 6/10\n","291/291 [==============================] - 70s 241ms/step - loss: 0.0739 - accuracy: 0.9738 - val_loss: 0.1329 - val_accuracy: 0.9574\n","Epoch 7/10\n","291/291 [==============================] - 70s 239ms/step - loss: 0.0627 - accuracy: 0.9771 - val_loss: 0.1079 - val_accuracy: 0.9592\n","Epoch 8/10\n","291/291 [==============================] - 70s 239ms/step - loss: 0.0647 - accuracy: 0.9766 - val_loss: 0.1252 - val_accuracy: 0.9523\n","Epoch 9/10\n","291/291 [==============================] - 71s 242ms/step - loss: 0.0545 - accuracy: 0.9783 - val_loss: 0.2564 - val_accuracy: 0.9321\n","Epoch 10/10\n","291/291 [==============================] - 70s 240ms/step - loss: 0.0531 - accuracy: 0.9798 - val_loss: 0.1538 - val_accuracy: 0.9531\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7d4ee1c3e2c0>"]},"metadata":{},"execution_count":14}],"source":["# 가져온 모델 훈련 가능하도록 설정\n","base_model.trainable = True\n","\n","# 훈련 가능한 파라미터 수를 위와 비교해보세요.\n","model.summary()\n","\n","# 컴파일 해주세요.\n","model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n","\n","# 방금 훈련한 모델을 조금 더 훈련시킵니다.\n","epochs =10\n","model.fit(train_ds, epochs=epochs, callbacks=es, validation_data=validation_ds)"]},{"cell_type":"markdown","metadata":{"id":"1x3KXtZY7QcL"},"source":["## 다시 테스트 데이터로 평가해보기"]},{"cell_type":"code","source":["model.evaluate(test_ds)"],"metadata":{"id":"Phq2K78YL9E6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715928774523,"user_tz":-540,"elapsed":4452,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"e6ad817a-849f-4b03-e538-3b730e323c46"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["73/73 [==============================] - 4s 61ms/step - loss: 0.1193 - accuracy: 0.9592\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.119318887591362, 0.9591573476791382]"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["적은 시간을 사용했을 경우 오히려 성능이 떨어질 가능성이 높습니다.<br>\n","원본 노트북에서는 훈련 불가능하게 만든 상태에서 20 epochs, 세부 튜닝에서 10 epochs 훈련하는데 성능이 조금 좋아집니다.<br>\n","전이학습에서 세부 튜닝하는 방법까지 공부한 것에 의의를 둡시다."],"metadata":{"id":"TYMX7_kXMETZ"}}],"metadata":{"colab":{"provenance":[{"file_id":"1Z74-11S6od-4CdTc-teJV5CEcaTL2WxI","timestamp":1715929472112},{"file_id":"1C93wfhxSGZ2Eux2GPGTLlzn1uhcPrw5Q","timestamp":1653141367451},{"file_id":"1u9fRCvTPZJc-g2Lu_3oMozqkOQZwyEwa","timestamp":1649250419614},{"file_id":"https://github.com/keras-team/keras-io/blob/master/guides/ipynb/transfer_learning.ipynb","timestamp":1649249435073}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}