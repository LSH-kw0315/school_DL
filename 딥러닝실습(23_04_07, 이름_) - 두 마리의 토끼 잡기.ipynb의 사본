{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1QGSG4a64vHkm5xaBnmyh0WpyNOkjDaOt","timestamp":1714716071655},{"file_id":"1CLpKAhVBFZf-UPC7B4awiMfqGISS2XLL","timestamp":1652186462100}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# 두 마리의 토끼 잡기<br>\n","by uramoon@kw.ac.kr (<a href=\"https://raw.githubusercontent.com/ronreiter/interactive-tutorials/master/LICENSE\">Apache 2.0 License</a>)<br>\n","하나의 인공신경망으로 MNIST와 우리가 그린 그림을 모두 잘 예측하도록 만들어봅시다.<br>\n","(MNIST 테스트 데이터 정확도 95% 이상 **AND** 우리가 그린 테스트 데이터 정확도 95% 이상)\n","\n","자료실의 our_mnist.npz 파일을 Colab에 업로드한 후 다음을 진행합니다.<br>\n","our_mnist.npz 파일은 여러분이 그린 그림으로 만든 데이터셋입니다."],"metadata":{"id":"_nxFM_yhhWqb"}},{"cell_type":"markdown","source":["## 우리가 그린 그림 가져오기"],"metadata":{"id":"kiwIH1uCVL2X"}},{"cell_type":"code","source":["import numpy as np\n","\n","npzfile = np.load('our_mnist.npz')\n","\n","our_train_images = npzfile['our_train_images']\n","our_train_labels = npzfile['our_train_labels']\n","our_test_images = npzfile['our_test_images']\n","our_test_labels = npzfile['our_test_labels']"],"metadata":{"id":"-KWVrESuSY3J","executionInfo":{"status":"ok","timestamp":1714717822419,"user_tz":-540,"elapsed":317,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["## 우리가 그린 훈련 데이터 살펴보기\n","우리가 그린 훈련 데이터는 [0, 1]로 정규화가 필요 없음을 알 수 있습니다."],"metadata":{"id":"oIgugUjkUsAf"}},{"cell_type":"code","source":["print(f'훈련 이미지 모양: {our_train_images.shape}')\n","print(f'훈련 데이터 값의 범위: [{our_train_images.min()}, {our_train_images.max()}]')\n","print(f'훈련 레이블 내용: {our_train_labels}')"],"metadata":{"id":"c8ZIe-JyUR9V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714717828515,"user_tz":-540,"elapsed":304,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"cf0b462b-789c-4b9b-fed7-e74a9e3f2e89"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["훈련 이미지 모양: (390, 28, 28, 1)\n","훈련 데이터 값의 범위: [0.0, 1.0]\n","훈련 레이블 내용: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n"," 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n"," 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\n"," 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6\n"," 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\n"," 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n"," 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\n"," 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9]\n"]}]},{"cell_type":"markdown","source":["## TODO1: MNIST 불러와서 [0, 1]로 정규화하기"],"metadata":{"id":"sPHpGhMPPNtI"}},{"cell_type":"code","source":["from keras.datasets import mnist\n","\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","train_images = train_images.astype('float32') / 255\n","test_images = test_images.astype('float32') / 255\n","\n","# CNN에서 사용하기 위해 흑백임을 나타내는 차원 추가 (28, 28) -> (28, 28, 1)\n","# reshape로도 가능\n","train_images = np.expand_dims(train_images, -1)\n","test_images = np.expand_dims(test_images, -1)"],"metadata":{"id":"hIfD6zpx9DjH","executionInfo":{"status":"ok","timestamp":1714718738362,"user_tz":-540,"elapsed":296,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["## 그림 비교해보기\n","우리가 직접 그린 숫자와 MNIST 데이터셋은 필체가 서로 다르기 때문에 단일 데이터셋으로 학습한 모델의 성능에 한계가 있었음을 확인할 수 있습니다."],"metadata":{"id":"7j0dFqBAQZP_"}},{"cell_type":"code","source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","import matplotlib.image as mpimg\n","import random\n","\n","plt.figure(figsize=(15, 7))\n","for i in range(5):\n","  plt.subplot(2, 5, i + 1)\n","  plt.imshow(our_train_images[i])\n","  plt.title(f'Our MNIST {i + 1}')\n","  plt.subplot(2, 5, i + 6)\n","  plt.imshow(train_images[i])\n","  plt.title(f'Original MNIST {i + 1}')\n","plt.show()"],"metadata":{"id":"T2dF-XOkQa4k","colab":{"base_uri":"https://localhost:8080/","height":577},"executionInfo":{"status":"ok","timestamp":1714717858781,"user_tz":-540,"elapsed":1605,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"f4584580-ade7-4d16-b81a-6921fd323b02"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x700 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## TODO2: 모델 만들기<br>\n","자유롭게 하나의 모델을 만들어 MNIST 테스트 데이터셋과 우리의 테스트 데이터셋에서 95% 이상의 정확도를 달성해보세요.<br>"],"metadata":{"id":"FjpcsqshPgCq"}},{"cell_type":"code","source":["# 모델을 자유롭게 만들어 보세요. (여러 개의 셀 사용 가능)\n","\n","from keras import models\n","from keras import layers\n","from keras.callbacks import EarlyStopping\n","\n","model = models.Sequential([\n","        layers.Conv2D(64, (3, 3), activation='relu'),\n","        layers.MaxPooling2D((2, 2)),\n","        layers.Dropout(0.5),\n","\n","        layers.Conv2D(64, (3, 3), activation='relu'),\n","        layers.MaxPooling2D((2, 2)),\n","        layers.Dropout(0.5),\n","\n","\n","        layers.Conv2D(64, (3, 3), activation='relu'),\n","\n","        layers.Flatten(),\n","\n","        layers.Dense(64, activation='relu'),\n","\n","        layers.Dense(10, activation='softmax')\n","])\n","\n","model.compile(loss='sparse_categorical_crossentropy', optimizer=\"adam\", metrics=[\"accuracy\"])"],"metadata":{"id":"3npKp_6gQQSt","executionInfo":{"status":"ok","timestamp":1714717968160,"user_tz":-540,"elapsed":1074,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["## TODO3: 나만의 훈련 데이터 만들기\n","\n","6만장의 MNIST 훈련 데이터와 우리가 그린 230장의 훈련 데이터를 잘 가공하여 나만의 훈련 데이터를 만들어 보세요.<br>\n","단순하게 둘을 이어붙인다면 우리가 그린 230장은 훈련에서 거의 무시되고 6만장의 MNIST 훈련 데이터 위주로 훈련이 일어납니다.\n","\n","\n","테스트 데이터 혹은 테스트 데이터를 가공한 데이터셋을 훈련 데이터에 포함하면 안됩니다. **실수하기 쉬우니 조심하세요.**<br>"],"metadata":{"id":"sYS1fEDGYXJK"}},{"cell_type":"code","source":["# TODO: 나만의 훈련 데이터를 자유롭게 만들어 보세요. (증강 등을 위해 여러 개의 코드블록을을 자유로이 사용 가능)\n","# Hint: https://numpy.org/doc/stable/reference/generated/numpy.concatenate.html 사용 가능\n","# 검증 데이터를 사용할 예정이라면 순서도 섞어 주세요.\n","from keras.preprocessing.image import ImageDataGenerator\n","\n","datagen = ImageDataGenerator(\n","    rotation_range=15,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    horizontal_flip=False,\n","    vertical_flip=False)\n","\n","augmented_train_images = np.empty((our_train_images.shape[0]*100,28,28,1))\n","augmented_train_labels = np.empty((our_train_labels.shape[0]*100,))\n","\n","# 배열 채우기, 훈련 데이터에서 한 장씩 꺼내 100개씩 만듭니다.\n","for i in range(len(our_train_images)):\n","  image = our_train_images[i]#TODO: 원본 이미지 지정\n","  label = our_train_labels[i]#TODO: 이미지의 답안 지정\n","  for j in range(100):\n","    augmented_train_images[i*100 + j] = datagen.random_transform(image)#TODO: datagen으로 생성한 이미지\n","    augmented_train_labels[i*100 + j] = label#TODO: 새로 생성한 이미지의 레이블\n","\n","\n","t_image=np.concatenate((augmented_train_images, train_images))\n","t_label=np.concatenate((augmented_train_labels, train_labels))\n","\n","idx = np.random.permutation(len(t_image))\n","\n","my_train_images =t_image[idx]\n","my_train_labels =t_label[idx]"],"metadata":{"id":"81d-fNXcYLj-","executionInfo":{"status":"ok","timestamp":1714718801297,"user_tz":-540,"elapsed":12180,"user":{"displayName":"이승헌","userId":"10348056862918872158"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["## TODO4: 훈련하기\n","자유롭게 모델을 훈련하여 MNIST 테스트 데이터셋과 우리의 테스트 데이터셋에서 95% 이상의 정확도를 달성해보세요.<br>\n","다만 테스트 데이터 혹은 테스트 데이터를 가공한 데이터셋으로 훈련하면 안됩니다. **실수하기 쉬우니 조심하세요.**<br>\n"],"metadata":{"id":"GvhclZCKXRew"}},{"cell_type":"code","source":["# 자유롭게 훈련해 보세요.\n","from keras.callbacks import EarlyStopping\n","\n","epochs = 10000\n","batch_size = 128\n","es = EarlyStopping(patience=10, restore_best_weights=True)\n","\n","model.fit(my_train_images, my_train_labels, epochs=epochs, batch_size=batch_size, callbacks=es, validation_split=0.2)"],"metadata":{"id":"vMM-e-klXTWh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714719114721,"user_tz":-540,"elapsed":272307,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"69811e42-adb3-4f15-fe8c-d153a0768afe"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10000\n","619/619 [==============================] - 11s 10ms/step - loss: 0.5955 - accuracy: 0.8086 - val_loss: 0.2111 - val_accuracy: 0.9431\n","Epoch 2/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.2269 - accuracy: 0.9333 - val_loss: 0.1333 - val_accuracy: 0.9648\n","Epoch 3/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.1652 - accuracy: 0.9517 - val_loss: 0.1131 - val_accuracy: 0.9678\n","Epoch 4/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.1294 - accuracy: 0.9607 - val_loss: 0.0819 - val_accuracy: 0.9784\n","Epoch 5/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.1090 - accuracy: 0.9665 - val_loss: 0.0797 - val_accuracy: 0.9761\n","Epoch 6/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0957 - accuracy: 0.9710 - val_loss: 0.0614 - val_accuracy: 0.9828\n","Epoch 7/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0831 - accuracy: 0.9747 - val_loss: 0.0510 - val_accuracy: 0.9851\n","Epoch 8/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0741 - accuracy: 0.9768 - val_loss: 0.0474 - val_accuracy: 0.9882\n","Epoch 9/10000\n","619/619 [==============================] - 5s 9ms/step - loss: 0.0680 - accuracy: 0.9786 - val_loss: 0.0448 - val_accuracy: 0.9864\n","Epoch 10/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0619 - accuracy: 0.9803 - val_loss: 0.0418 - val_accuracy: 0.9879\n","Epoch 11/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0560 - accuracy: 0.9822 - val_loss: 0.0396 - val_accuracy: 0.9887\n","Epoch 12/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0534 - accuracy: 0.9831 - val_loss: 0.0359 - val_accuracy: 0.9902\n","Epoch 13/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0478 - accuracy: 0.9842 - val_loss: 0.0350 - val_accuracy: 0.9906\n","Epoch 14/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0453 - accuracy: 0.9855 - val_loss: 0.0349 - val_accuracy: 0.9904\n","Epoch 15/10000\n","619/619 [==============================] - 5s 9ms/step - loss: 0.0456 - accuracy: 0.9857 - val_loss: 0.0313 - val_accuracy: 0.9912\n","Epoch 16/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0430 - accuracy: 0.9864 - val_loss: 0.0322 - val_accuracy: 0.9910\n","Epoch 17/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0428 - accuracy: 0.9863 - val_loss: 0.0311 - val_accuracy: 0.9918\n","Epoch 18/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0380 - accuracy: 0.9878 - val_loss: 0.0312 - val_accuracy: 0.9921\n","Epoch 19/10000\n","619/619 [==============================] - 6s 9ms/step - loss: 0.0385 - accuracy: 0.9878 - val_loss: 0.0305 - val_accuracy: 0.9912\n","Epoch 20/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0363 - accuracy: 0.9883 - val_loss: 0.0298 - val_accuracy: 0.9922\n","Epoch 21/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0362 - accuracy: 0.9888 - val_loss: 0.0280 - val_accuracy: 0.9928\n","Epoch 22/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0344 - accuracy: 0.9891 - val_loss: 0.0259 - val_accuracy: 0.9930\n","Epoch 23/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0332 - accuracy: 0.9894 - val_loss: 0.0297 - val_accuracy: 0.9922\n","Epoch 24/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0315 - accuracy: 0.9900 - val_loss: 0.0274 - val_accuracy: 0.9934\n","Epoch 25/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0309 - accuracy: 0.9896 - val_loss: 0.0290 - val_accuracy: 0.9932\n","Epoch 26/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0315 - accuracy: 0.9896 - val_loss: 0.0285 - val_accuracy: 0.9920\n","Epoch 27/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0314 - accuracy: 0.9901 - val_loss: 0.0272 - val_accuracy: 0.9926\n","Epoch 28/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0270 - accuracy: 0.9913 - val_loss: 0.0273 - val_accuracy: 0.9930\n","Epoch 29/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0306 - accuracy: 0.9900 - val_loss: 0.0261 - val_accuracy: 0.9940\n","Epoch 30/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0290 - accuracy: 0.9909 - val_loss: 0.0286 - val_accuracy: 0.9934\n","Epoch 31/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0297 - accuracy: 0.9904 - val_loss: 0.0272 - val_accuracy: 0.9935\n","Epoch 32/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0267 - accuracy: 0.9911 - val_loss: 0.0254 - val_accuracy: 0.9940\n","Epoch 33/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0284 - accuracy: 0.9908 - val_loss: 0.0282 - val_accuracy: 0.9931\n","Epoch 34/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0266 - accuracy: 0.9913 - val_loss: 0.0282 - val_accuracy: 0.9938\n","Epoch 35/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0269 - accuracy: 0.9913 - val_loss: 0.0245 - val_accuracy: 0.9941\n","Epoch 36/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0272 - accuracy: 0.9913 - val_loss: 0.0285 - val_accuracy: 0.9937\n","Epoch 37/10000\n","619/619 [==============================] - 6s 10ms/step - loss: 0.0259 - accuracy: 0.9917 - val_loss: 0.0251 - val_accuracy: 0.9943\n","Epoch 38/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0264 - accuracy: 0.9914 - val_loss: 0.0250 - val_accuracy: 0.9944\n","Epoch 39/10000\n","619/619 [==============================] - 5s 9ms/step - loss: 0.0246 - accuracy: 0.9922 - val_loss: 0.0260 - val_accuracy: 0.9948\n","Epoch 40/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0249 - accuracy: 0.9920 - val_loss: 0.0284 - val_accuracy: 0.9931\n","Epoch 41/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0239 - accuracy: 0.9923 - val_loss: 0.0266 - val_accuracy: 0.9944\n","Epoch 42/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0234 - accuracy: 0.9924 - val_loss: 0.0263 - val_accuracy: 0.9936\n","Epoch 43/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0227 - accuracy: 0.9929 - val_loss: 0.0274 - val_accuracy: 0.9937\n","Epoch 44/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0244 - accuracy: 0.9920 - val_loss: 0.0232 - val_accuracy: 0.9948\n","Epoch 45/10000\n","619/619 [==============================] - 4s 7ms/step - loss: 0.0217 - accuracy: 0.9930 - val_loss: 0.0260 - val_accuracy: 0.9944\n","Epoch 46/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0228 - accuracy: 0.9926 - val_loss: 0.0275 - val_accuracy: 0.9943\n","Epoch 47/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0240 - accuracy: 0.9924 - val_loss: 0.0271 - val_accuracy: 0.9942\n","Epoch 48/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0235 - accuracy: 0.9925 - val_loss: 0.0257 - val_accuracy: 0.9941\n","Epoch 49/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0222 - accuracy: 0.9930 - val_loss: 0.0262 - val_accuracy: 0.9941\n","Epoch 50/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0225 - accuracy: 0.9927 - val_loss: 0.0283 - val_accuracy: 0.9948\n","Epoch 51/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0220 - accuracy: 0.9930 - val_loss: 0.0287 - val_accuracy: 0.9941\n","Epoch 52/10000\n","619/619 [==============================] - 5s 9ms/step - loss: 0.0233 - accuracy: 0.9928 - val_loss: 0.0248 - val_accuracy: 0.9944\n","Epoch 53/10000\n","619/619 [==============================] - 5s 7ms/step - loss: 0.0220 - accuracy: 0.9930 - val_loss: 0.0261 - val_accuracy: 0.9942\n","Epoch 54/10000\n","619/619 [==============================] - 5s 8ms/step - loss: 0.0207 - accuracy: 0.9930 - val_loss: 0.0292 - val_accuracy: 0.9937\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7be342c43a00>"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["## TODO5: MNIST 테스트 데이터로 평가하기"],"metadata":{"id":"4zVHOssHWQwj"}},{"cell_type":"code","source":["# MNIST 테스트 데이터에서 정확도 95% 이상 달성하기\n","# 코드 실행만 하면 됩니다.\n","\n","score = model.evaluate(test_images, test_labels, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])"],"metadata":{"id":"PlBm6caTFabt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714719167964,"user_tz":-540,"elapsed":53247,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"65ac57ad-c457-435e-cbd4-c201225d7830"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.024383777752518654\n","Test accuracy: 0.9937000274658203\n"]}]},{"cell_type":"markdown","source":["## TODO6: 우리가 만든 테스트 데이터로 평가하기"],"metadata":{"id":"3lz-yYOpWXnI"}},{"cell_type":"code","source":["# 우리가 만든 테스트 데이터에서도 정확도 95% 이상 달성하기\n","# 코드 실행만 하면 됩니다.\n","\n","score = model.evaluate(our_test_images, our_test_labels, verbose=0)\n","print(\"Test loss:\", score[0])\n","print(\"Test accuracy:\", score[1])"],"metadata":{"id":"09jYFkTUEMYs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1714719168543,"user_tz":-540,"elapsed":583,"user":{"displayName":"이승헌","userId":"10348056862918872158"}},"outputId":"d0a4998c-8f24-4b14-ebb3-bdb5ef85f0bd"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss: 0.0849185511469841\n","Test accuracy: 0.9846153855323792\n"]}]},{"cell_type":"markdown","source":["동일한 모델로 TODO5와 TODO6에서 정확도 95% 이상 달성해야 합니다.<br>\n","실패했다면 TODO2부터 검토하여 다시 도전해 보세요."],"metadata":{"id":"AdlsWDG6gTvI"}}]}